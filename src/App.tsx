import { useState, useEffect } from 'react';
import type { NewsItem } from './types/news';
import { NEWS_SOURCES } from './types/news';
import { rssService } from './services/rssService';
import { realtimeService, type RealtimeEvent } from './services/realtimeService';
import { analyticsTrackingService } from './services/analyticsTrackingService';
import { translationService } from './services/translationService';
import './services/dataLogger'; // „Éá„Éº„Çø„É≠„Ç¨„Éº„ÇíÂàùÊúüÂåñ
import { filterRecentNews, getDateRangeText } from './utils/dateFilter';
import CategorySection from './components/CategorySection';
import CategoryAllPage from './components/CategoryAllPage';
import SearchPage from './components/SearchPage';
import SavedPage from './components/SavedPage';
import SourceRanking from './components/SourceRanking';
import RealtimeStatus from './components/RealtimeStatus';
import AdminAccess from './components/AdminAccess';
import './App.css';

type PageType = 'home' | 'search' | 'saved' | 'category-all' | 'ranking';

interface CategoryAllState {
  category: string;
  icon: string;
}

function App() {
  const [news, setNews] = useState<NewsItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string>('');
  const [currentPage, setCurrentPage] = useState<PageType>('home');
  const [categoryAllState, setCategoryAllState] = useState<CategoryAllState | null>(null);
  const [isRealtimeConnected, setIsRealtimeConnected] = useState(false);
  const [showAdminAccess, setShowAdminAccess] = useState(false);
  const [isTranslated, setIsTranslated] = useState(false);
  const [isTranslating, setIsTranslating] = useState(false);
  const [originalNews, setOriginalNews] = useState<NewsItem[]>([]);

  // „Ç´„ÉÜ„Ç¥„É™Ë®≠ÂÆö
  const categories = [
    { name: 'AI„ÉªÊ©üÊ¢∞Â≠¶Áøí', icon: 'ü§ñ' },
    { name: 'ÁµåÊ∏à„Éª„Éì„Ç∏„Éç„Çπ', icon: 'üí∞' },
    { name: '„ÉÜ„ÇØ„Éé„É≠„Ç∏„Éº', icon: 'üíª' }
  ];

  // ÁÆ°ÁêÜËÄÖ„Ç¢„ÇØ„Çª„Çπ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„ÉàË®≠ÂÆö ("yasuyuki" ÂÖ•Âäõ„ÅÆ„Åø)
  useEffect(() => {
    let keySequence = '';
    let sequenceTimer: number;

    const handleKeyDown = (event: KeyboardEvent) => {
      // ÁâπÂà•„Å™„Ç∑„Éº„Ç±„É≥„Çπ: "yasuyuki" „ÇíÈÄ£Á∂öÂÖ•Âäõ
      if (!event.ctrlKey && !event.altKey && !event.metaKey && !event.shiftKey) {
        keySequence += event.key.toLowerCase();
        console.log('üîë Key pressed:', event.key, 'Current sequence:', keySequence);

        // 3ÁßíÂæå„Å´„Ç∑„Éº„Ç±„É≥„Çπ„Çí„É™„Çª„ÉÉ„Éà
        clearTimeout(sequenceTimer);
        sequenceTimer = setTimeout(() => {
          console.log('‚è∞ Sequence reset after timeout');
          keySequence = '';
        }, 3000);

        // "yasuyuki" „ÅåÂÖ•Âäõ„Åï„Çå„Åü„Çâ„Ç¢„ÇØ„Çª„ÇπË®±ÂèØ
        if (keySequence.includes('yasuyuki')) {
          console.log('üîì Secret code detected! Opening admin access...');
          event.preventDefault();
          keySequence = '';
          setShowAdminAccess(true);
        }

        // „Ç∑„Éº„Ç±„É≥„Çπ„ÅåÈï∑„Åô„Åé„ÇãÂ†¥Âêà„ÅØ„É™„Çª„ÉÉ„Éà
        if (keySequence.length > 20) {
          console.log('üìè Sequence too long, resetting...');
          keySequence = '';
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      clearTimeout(sequenceTimer);
    };
  }, []);

  useEffect(() => {
    // „Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„ÇπÂàùÊúüÂåñ
    analyticsTrackingService.trackPageView('home');

    // „Éá„Éº„Çø„É≠„Ç¨„ÉºÂàùÊúüÂåñÔºàËá™Âãï„Åß„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„ÉâË®òÈå≤ÈñãÂßãÔºâ
    console.log('üìä Data logger initialized - automatic analytics recording started');

    loadNews();

    // „É™„Ç¢„É´„Çø„Ç§„É†„Çµ„Éº„Éì„Çπ„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
    const handleRealtimeEvent = (event: RealtimeEvent) => {
      if (event.type === 'news_update' && Array.isArray(event.data)) {
        console.log('Realtime news update received:', event.data.length, 'items');
        const recentNews = filterRecentNews(event.data);
        setNews(recentNews.length > 0 ? recentNews : event.data.slice(0, 20));
        setLoading(false);
        setError('');
      }
    };

    realtimeService.subscribe('app-main', handleRealtimeEvent);

    // ÂæìÊù•„ÅÆ10ÂàÜÈñìÈöîÊõ¥Êñ∞„ÅØÂâäÈô§Ôºà„É™„Ç¢„É´„Çø„Ç§„É†„Çµ„Éº„Éì„Çπ„Å´ÁΩÆ„ÅçÊèõ„ÅàÔºâ
    return () => {
      realtimeService.unsubscribe('app-main');
    };
  }, [currentPage]);

  // „Éö„Éº„Ç∏Â§âÊõ¥ÊôÇ„ÅÆ„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„ÇπËøΩË∑°
  useEffect(() => {
    analyticsTrackingService.trackPageView(currentPage);
  }, [currentPage]);

  const loadNews = async () => {
    setLoading(true);
    setError('');

    try {
      console.log(`üöÄ „Éã„É•„Éº„ÇπË™≠„ÅøËæº„ÅøÈñãÂßã (${NEWS_SOURCES.length}„ÇΩ„Éº„Çπ)`);
      const startTime = Date.now();

      const allNews = await rssService.fetchAllFeeds(NEWS_SOURCES);
      const loadTime = Date.now() - startTime;
      console.log(`‚úÖ „Éã„É•„Éº„ÇπË™≠„ÅøËæº„ÅøÂÆå‰∫Ü: ${loadTime}ms - ${allNews.length}‰ª∂ÂèñÂæó`);

      // ÈÅéÂéª2ÈÄ±Èñì‰ª•ÂÜÖ„ÅÆË®ò‰∫ã„ÅÆ„Åø„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
      const recentNews = filterRecentNews(allNews);
      console.log(`üìÖ ÊúÄËøë„ÅÆ„Éã„É•„Éº„Çπ: ${recentNews.length}‰ª∂ (ÂÖ®${allNews.length}‰ª∂‰∏≠)`);

      // „Éã„É•„Éº„Çπ„Çí„Åù„ÅÆ„Åæ„ÅæË°®Á§∫ÔºàÁøªË®≥„Å™„ÅóÔºâ
      if (allNews.length > 0 && recentNews.length === 0) {
        console.log('üì∞ ÈÅéÂéª2ÈÄ±Èñì‰ª•ÂÜÖ„ÅÆ„Éã„É•„Éº„Çπ„Å™„Åó„ÄÇÂÖ®Ë®ò‰∫ã„ÅÆÊúÄÊñ∞20‰ª∂„ÇíË°®Á§∫Ôºà„Éá„Éê„ÉÉ„Ç∞Ôºâ');
        const oldNews = allNews.slice(0, 20);
        setOriginalNews(oldNews);
        setNews(oldNews);
      } else {
        console.log(`üì∞ „Éã„É•„Éº„Çπ„ÇíË°®Á§∫: ${recentNews.length}‰ª∂`);
        setOriginalNews(recentNews);
        setNews(recentNews);
      }

      // ÁøªË®≥Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
      setIsTranslated(false);

      if (allNews.length === 0) {
        setError('„Éã„É•„Éº„Çπ„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ');
      } else if (recentNews.length === 0 && allNews.length > 0) {
        setError('ÈÅéÂéª2ÈÄ±Èñì‰ª•ÂÜÖ„ÅÆ„Éã„É•„Éº„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ(„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ: ÂÖ®Ë®ò‰∫ã„ÇíË°®Á§∫‰∏≠)');
      }
    } catch (error) {
      console.error('„Éã„É•„Éº„Çπ„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
      setError('„Éã„É•„Éº„Çπ„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + (error instanceof Error ? error.message : String(error)));
    } finally {
      setLoading(false);
    }
  };


  const handleRefresh = () => {
    if (isRealtimeConnected) {
      // „É™„Ç¢„É´„Çø„Ç§„É†Êé•Á∂ö‰∏≠„ÅØÊâãÂãïÊõ¥Êñ∞„ÇíÂÆüË°å
      realtimeService.triggerManualUpdate();
    } else {
      // „É™„Ç¢„É´„Çø„Ç§„É†Êú™Êé•Á∂öÊôÇ„ÅØÂæìÊù•„ÅÆÊõ¥Êñ∞ÊñπÊ≥ï
      loadNews();
    }
  };

  // ÁøªË®≥„Éà„Ç∞„É´Ê©üËÉΩ
  const handleTranslationToggle = async () => {
    if (isTranslating) return; // ÁøªË®≥‰∏≠„ÅØÁÑ°Âäπ

    setIsTranslating(true);

    try {
      if (isTranslated) {
        // ÁøªË®≥„ÇíËß£Èô§Ôºö„Ç™„É™„Ç∏„Éä„É´„Å´Êàª„Åô
        console.log('üî§ ÁøªË®≥„ÇíËß£Èô§‰∏≠...');
        setNews(originalNews);
        setIsTranslated(false);
        console.log('‚úÖ „Ç™„É™„Ç∏„Éä„É´Ë°®Á§∫„Å´Êàª„Åó„Åæ„Åó„Åü');
      } else {
        // ÁøªË®≥„ÇíÂÆüË°å
        console.log('üî§ „Éã„É•„Éº„Çπ„Çø„Ç§„Éà„É´„ÇíÊó•Êú¨Ë™û„Å´ÁøªË®≥‰∏≠...');
        const translationStartTime = Date.now();
        const translatedNews = await translationService.translateNewsItems(originalNews);
        const translationTime = Date.now() - translationStartTime;
        console.log(`‚úÖ ÁøªË®≥ÂÆå‰∫Ü: ${translationTime}ms`);
        setNews(translatedNews);
        setIsTranslated(true);
      }
    } catch (error) {
      console.error('ÁøªË®≥„Ç®„É©„Éº:', error);
      setError('ÁøªË®≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + (error instanceof Error ? error.message : String(error)));
    } finally {
      setIsTranslating(false);
    }
  };

  const handlePageChange = (page: PageType) => {
    setCurrentPage(page);
    if (page !== 'category-all') {
      setCategoryAllState(null);
    }
  };


  const handleShowAllCategory = (categoryName: string) => {
    const category = categories.find(cat => cat.name === categoryName);
    if (category) {
      setCategoryAllState({
        category: categoryName,
        icon: category.icon
      });
      setCurrentPage('category-all');
    }
  };

  const handleBackToHome = () => {
    setCurrentPage('home');
    setCategoryAllState(null);
  };

  const getNewsByCategory = (categoryName: string): NewsItem[] => {
    return news.filter(item => item.category === categoryName);
  };

  const getTotalNewsCount = () => {
    return news.length;
  };

  const renderPage = () => {
    switch (currentPage) {
      case 'search':
        return <SearchPage news={news} />;
      case 'saved':
        return <SavedPage />;
      case 'ranking':
        return <SourceRanking />;
      case 'category-all':
        if (!categoryAllState) return null;
        return (
          <CategoryAllPage
            category={categoryAllState.category}
            news={getNewsByCategory(categoryAllState.category)}
            icon={categoryAllState.icon}
            onBack={handleBackToHome}
          />
        );
      default:
        console.log('Rendering default page. State:', { loading, error: !!error, newsCount: news.length });
        return (
          <>
            {loading && (
              <div className="loading-section">
                <div className="loading-spinner">üîÑ</div>
                <p>ÊúÄÊñ∞„Éã„É•„Éº„Çπ„ÇíÂèñÂæó‰∏≠...</p>
              </div>
            )}

            {error && (
              <div className="error-section">
                <p>‚ùå {error}</p>
              </div>
            )}

            {!loading && !error && news.length > 0 && (() => {
              console.log('Rendering categories with news:', news.length);
              return (
                <div className="categories-container">
                  {categories.map(category => {
                    const categoryNews = getNewsByCategory(category.name);
                    console.log(`Category ${category.name}: ${categoryNews.length} articles`);
                    return (
                      <CategorySection
                        key={category.name}
                        category={category.name}
                        news={categoryNews}
                        icon={category.icon}
                        onShowAll={handleShowAllCategory}
                      />
                    );
                  })}
                </div>
              );
            })()}

            {!loading && !error && news.length === 0 && (() => {
              console.log('Showing empty state');
              return (
                <div className="empty-state">
                  <p>üì∞ „Éã„É•„Éº„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü</p>
                </div>
              );
            })()}
          </>
        );
    }
  };

  return (
    <div className="app">
      <header className="app-header">
        <h1>ü§ñ AI „Éã„É•„Éº„Çπ</h1>
        <div className="app-subtitle">
          ÊúÄÊñ∞AIÊäÄË°ì„ÉªÊ©üÊ¢∞Â≠¶Áøí„ÅÆÊÉÖÂ†±„Çí„ÅäÂ±ä„Åë
        </div>

        {/* „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ */}
        <nav className="app-nav">
          <button
            onClick={() => handlePageChange('home')}
            className={`nav-btn ${currentPage === 'home' ? 'active' : ''}`}
          >
            üè† „Éõ„Éº„É†
          </button>
          <button
            onClick={() => handlePageChange('search')}
            className={`nav-btn ${currentPage === 'search' ? 'active' : ''}`}
          >
            üîç Ê§úÁ¥¢
          </button>
          <button
            onClick={() => handlePageChange('ranking')}
            className={`nav-btn ${currentPage === 'ranking' ? 'active' : ''}`}
          >
            üìä „É©„É≥„Ç≠„É≥„Ç∞
          </button>
        </nav>

        {currentPage === 'home' && (
          <div className="header-controls">
            <div className="news-stats">
              {!loading && <span>Á∑èË®à: {getTotalNewsCount()}‰ª∂</span>}
              <span className="date-filter-info">üìÖ ÈÅéÂéª2ÈÄ±Èñì‰ª•ÂÜÖ ({getDateRangeText()})</span>
              {!isRealtimeConnected && (
                <span className="auto-refresh-info">üîÑ ÊâãÂãïÊõ¥Êñ∞</span>
              )}
              {isTranslated && (
                <span className="translation-info">üåê ÁøªË®≥Ë°®Á§∫‰∏≠</span>
              )}
            </div>
            <button onClick={handleRefresh} className="refresh-btn" disabled={loading}>
              {loading ? 'üîÑ Êõ¥Êñ∞‰∏≠...' : 'üîÑ Êõ¥Êñ∞'}
            </button>
            <button
              onClick={handleTranslationToggle}
              className="translation-btn"
              disabled={isTranslating || loading || news.length === 0}
              title={isTranslated ? 'Ëã±Ë™ûË°®Á§∫„Å´Êàª„Åô' : 'Êó•Êú¨Ë™û„Å´ÁøªË®≥'}
            >
              {isTranslating ? 'üîÑ ÁøªË®≥‰∏≠...' : isTranslated ? 'üåê EN' : 'üåê JP'}
            </button>
          </div>
        )}

      </header>

      <main className="app-main">
        {currentPage === 'home' && (
          <RealtimeStatus onStatusChange={setIsRealtimeConnected} />
        )}
        {renderPage()}
      </main>

      {/* ÁÆ°ÁêÜËÄÖ„Ç¢„ÇØ„Çª„Çπ - Èö†„ÅóÊ©üËÉΩ */}
      {showAdminAccess && <AdminAccess onClose={() => setShowAdminAccess(false)} />}

    </div>
  );
}

export default App;
